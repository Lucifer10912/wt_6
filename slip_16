Q1

XML

<?xml version="1.0" encoding="UTF-8"?>
<library>
<book>
<title>Harry Potter and the Philosopher's Stone</title>
<author>J.K. Rowling</author>
<year>1997</year>
<price>10.99</price>
</book>
<book>
<title>The Hobbit</title>
<author>J.R.R. Tolkien</author>
<year>1937</year>
<price>8.99</price>
</book>
<book>
<title>To Kill a Mockingbird</title>
<author>Harper Lee</author>
<year>1960</year>
<price>12.99</price>
</book>
</library>

HTML 2

<!DOCTYPE html>
<html>
<head>
<title>Book Details</title>
<script src="jquery.js"></script>
<script type="text/javascript">
$(document).ready(function(){
$('#bookSelect').change(function(){
var selectedBook = $(this).val();
$.ajax({
type: "GET",
url: "books.xml",
dataType: "xml",
success: function(xml)
 {
$(xml).find('book').each(function()
 {
var title = $(this).find('title').text();
 if(title === selectedBook)
 {
var author = $(this).find('author').text();
var year = $(this).find('year').text();
var price = $(this).find('price').text();
var details = "Author: " + author + "<br>Year: " + year + "<br>Price: $" + price;
$('#bookDetails').html(details);
}
});
}
});
});
});
</script>
</head>
<body>
<h1>Book Details</h1>
<select id="bookSelect">
<option value="">--Select a Book--</option>
<option value="Harry Potter and the Philosopher's Stone">Harry Potter and the Philosopher's 
Stone</option>
<option value="The Hobbit">The Hobbit</option>
<option value="To Kill a Mockingbird">To Kill a Mockingbird</option>
</select>
<div id="bookDetails"></div>
</body>
</html>







Q2

import nltk
import re
nltk.download('all')
import re

text = """"Text Summariaztion 000 is an NLP techniqe that extracts text froma large amount of data.
It is the process of identifying the most imporant 1meaningful information Sin a document and compressing it
7into a shorter version by preserving its meaning. Types: Extractive summarization and Abstractive summarization.
To perform extractive summarization, @@we calculate the sentence weights and choose the first 'n' sentence with
maximum weight, {The weights are calculated on the basis of the word frequencies ] """

text = re.sub(r'[[0-9]*]',' ',text)

text = re.sub(r's+',' ',text)

text = re.sub(r'[[0-9]{}*]',' ',text)

formatted_text = re.sub('[^a-zA-Z]',' ',text)
print(formatted_text)
